{"version":3,"sources":["components/UI/Input/Input.module.css","containters/Auth/Auth.module.css","containters/Auth/Auth.js","components/UI/Input/Input.js"],"names":["module","exports","Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","isSignup","inputChangedHandler","event","controlName","updatedControls","updateObject","target","checkValidity","setState","submitHandler","preventDefault","props","onAuth","switchAuthModeHandler","prevState","this","buildingBurger","authRedirectPath","onSetAuthRedirectPath","formElementsArray","key","push","id","config","form","map","formElement","Input","invalid","shouldValidate","changed","loading","Spinner","errorMessge","error","style","color","message","authRedirect","isAuth","to","className","classes","onSubmit","Button","btnType","clicked","Component","connect","auth","token","burgerBuilder","building","dispatch","actions","input","inputElement","inputClasses","InputElement","Invalid","join","onChange","options","option","displayValue","Label","label"],"mappings":"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","file":"static/js/4.b4a0cf6c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3r5Ke\",\"Label\":\"Input_Label__1qyHr\",\"InputElement\":\"Input_InputElement__2m88K\",\"Invalid\":\"Input_Invalid__16Mis\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__12r8M\"};","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\n\nimport {\n\tButton,\n\tInput,\n\tSpinner\n } from '../../components/UI/index';\nimport classes from './Auth.module.css';\nimport * as actions from '../../store/actions/index';\nimport { updateObject, checkValidity } from '../../shared/utility';\n\nclass Auth extends Component {\n\tstate = {\n\t\tcontrols: {\n      email: {\n  \t    elementType: 'input',\n        elementConfig: {\n          type: 'email',\n          placeholder: 'E-mail Adress'\n        },\n        value: '',\n        validation: {\n\t\t\t\t\trequired: true,\n\t\t\t\t\tisEmail: true\n        },\n        valid: false,\n        touched: false\n      },\n      password: {\n  \t    elementType: 'input',\n        elementConfig: {\n          type: 'password',\n          placeholder: 'Password'\n        },\n        value: '',\n        validation: {\n\t\t\t\t\trequired: true,\n\t\t\t\t\tminLength: 6\n        },\n        valid: false,\n        touched: false\n      }\n\t\t},\n\t\tisSignup: true\n\t}\n\n\tcomponentDidMount() {\n\t\tif (!this.props.buildingBurger && this.props.authRedirectPath !== '/') {\n\t\t\tthis.props.onSetAuthRedirectPath();\n\t\t}\n\t}\n\n\n\n  inputChangedHandler = (event, controlName) => {\n\t\tconst updatedControls = updateObject(this.state.controls, {\n\t\t\t[controlName]: updateObject(this.state.controls[controlName], {\n\t\t\t\tvalue: event.target.value,\n\t\t\t\tvalid: checkValidity(event.target.value, this.state.controls[controlName].validation),\n\t\t\t\ttouched: true\n\t\t\t})\n\t\t});\n\n\t\tthis.setState({controls: updatedControls});\n  }\n\t\n\tsubmitHandler = (event) => {\n\t\tevent.preventDefault();\n\n\t\tthis.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignup);\n\t}\n\n\tswitchAuthModeHandler = () => {\n\t\tthis.setState(prevState => {\n\t\t\treturn{isSignup: !prevState.isSignup};\n\t\t})\n\t}\n\n\trender() {\n  \tconst formElementsArray = [];\n    for(let key in this.state.controls) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.controls[key]\n      })\n\t\t}\n\t\t\n\t\tlet form = formElementsArray.map(formElement => (\n\t\t\t<Input\n\t\t\t\tkey={formElement.id}\n\t\t\t\telementType={formElement.config.elementType}\n\t\t\t\telementConfig={formElement.config.elementConfig}\n\t\t\t\tvalue={formElement.config.value}\n\t\t\t\tinvalid={!formElement.config.valid}\n\t\t\t\tshouldValidate={formElement.config.validation}\n\t\t\t\ttouched={formElement.config.touched}\n\t\t\t\tchanged={(event) => this.inputChangedHandler(event, formElement.id)}\n\t\t\t\t/>\n\t\t));\n\n\t\tif (this.props.loading) {\n\t\t\tform = <Spinner />;\n\t\t}\n\n\t\tlet errorMessge = null;\n\n\t\tif(this.props.error) {\n\t\t\terrorMessge = (<p style={{color: 'red'}}>{this.props.error.message}</p>);\n\t\t}\n\n\t\tlet authRedirect = null;\n\n\t\tif(this.props.isAuth) {\n\t\t\tauthRedirect = <Redirect to={this.props.authRedirectPath} />;\n\t\t}\n\n\t\treturn (\n\t\t\t<div className={classes.Auth}>\n\t\t\t\t{authRedirect}\n\t\t\t\t<h1>{this.state.isSignup ? \"Signing up\" : \"Signing in\"}</h1>\n\t\t\t\t{errorMessge}\n\t\t\t\t<form onSubmit={this.submitHandler}>\n\t\t\t\t\t{form}\n\t\t\t\t\t<Button btnType=\"Success\">SUBMIT</Button>\n\t\t\t\t</form>\n\t\t\t\t<Button\n\t\t\t\t\tclicked={this.switchAuthModeHandler}\n\t\t\t\t\tbtnType=\"Danger\">SWITCH TO {this.state.isSignup ? \"SIGNIN\" : \"SIGNUP\"}</Button>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nconst mapStateToProps = state => {\n\treturn {\n\t\tloading: state.auth.loading,\n\t\terror: state.auth.error,\n\t\tisAuth: state.auth.token !== null,\n\t\tbuildingBurger: state.burgerBuilder.building,\n\t\tauthRedirectPath: state.auth.authRedirectPath\n\t};\n};\n\nconst mapDispatchToProps = dispatch => {\n\treturn {\n\t\tonAuth: (email, password, isSignup) => dispatch(actions.auth(email, password, isSignup)),\n\t\tonSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\n\t};\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);","import React from 'react';\n\nimport classes from './Input.module.css';\n\nconst input = props => {\n  let inputElement = null;\n  const inputClasses = [classes.InputElement];\n\n  if(props.invalid && props.shouldValidate && props.touched) {\n    inputClasses.push(classes.Invalid);\n  }\n\n\tswitch (props.elementType) {\n\t\tcase ('input'):\n\t\t\tinputElement = <input className={inputClasses.join(' ')}\n        {...props.elementConfig}\n        value={props.value}\n        onChange={props.changed}/>;\n      break;\n    case ('textarea'):\n      inputElement = <textarea className={inputClasses.join(' ')}\n        {...props.elementConfig}\n        value={props.value}\n        onChange={props.changed} />;\n      break;\n    case ('select'):\n      inputElement = (\n        <select\n          className={inputClasses.join(' ')}\n          value={props.value}\n          onChange={props.changed}>\n          {\n            props.elementConfig.options.map(option => (\n              <option key={option.value} value={option.value}>\n                {option.displayValue}\n              </option>\n            ))\n          }\n        </select>);\n      break;\n    default:\n      inputElement = <input className={inputClasses.join(' ')}\n        {...props.elementConfig}\n        value={props.value}\n        onChange={props.changed} />;\n  }\n\n\treturn (\n\t\t<div className={classes.Input}>\n\t\t\t<label className={classes.Label}>{props.label}</label>\n\t\t\t{inputElement}\n\t\t</div>\n);\n}\n\nexport { input as Input };\nexport default input;"],"sourceRoot":""}