{"version":3,"sources":["components/UI/Input/Input.module.css","components/Order/CheckoutSummary/CheckoutSummary.module.css","containters/Checkout/ContactData/ContactData.module.css","components/Order/CheckoutSummary/CheckoutSummary.js","containters/Checkout/ContactData/ContactData.js","containters/Checkout/Checkout.js","components/UI/Input/Input.js"],"names":["module","exports","checkoutSummary","props","className","classes","CheckoutSummary","style","width","height","margin","ingredients","Burger","Button","btnType","clicked","checkoutCancelled","checkoutContinued","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","zipCode","minLength","maxLength","country","email","deliveryMethod","options","displayValue","formIsValid","orderHandler","event","preventDefault","formData","formElementId","order","ings","price","orderData","userId","onOrderBurger","token","inputChangedHandler","inputIdentifier","updatedFormElement","updateObject","target","checkValidity","updatedOrderForm","inputId","setState","formElementsArray","key","this","push","id","config","form","onSubmit","map","formElement","Input","invalid","shouldValidate","changed","disabled","loading","Spinner","Component","connect","burgerBuilder","totalPrice","auth","dispatch","actions","withErrorHandler","axios","Checkout","checkoutCancelledHandler","history","goBack","checkoutContinuedHandler","replace","summary","to","purchasedRedirect","purchased","path","match","component","input","inputElement","inputClasses","InputElement","Invalid","join","onChange","option","Label","label"],"mappings":"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","file":"static/js/3.4059c6b4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3r5Ke\",\"Label\":\"Input_Label__1qyHr\",\"InputElement\":\"Input_InputElement__2m88K\",\"Invalid\":\"Input_Invalid__16Mis\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__3PsXi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__31ME6\"};","import React from 'react';\n\nimport Burger from '../../Burger/Burger';\nimport Button from '../../UI/Button/Button';\nimport classes from './CheckoutSummary.module.css';\n\nconst checkoutSummary = (props) => {\n    return (\n        <div className={classes.CheckoutSummary}>\n            <h1>We hope it tastes well!</h1>\n            <div style={{width: '100%', height: '300px', margin: 'auto'}}>\n                { props.ingredients ? <Burger ingredients={props.ingredients} /> : null }\n            </div>\n            <Button\n                btnType=\"Danger\"\n                clicked={props.checkoutCancelled}>CANCEL</Button>\n            <Button\n                btnType=\"Success\"\n                clicked={props.checkoutContinued}>CONTINUE</Button>\n        </div>\n    );\n}\n\nexport default checkoutSummary;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport axios from '../../../axios-orders';\nimport Button from '../../../components/UI/Button/Button';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport classes from './ContactData.module.css';\nimport Input from '../../../components/UI/Input/Input';\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\nimport * as actions from '../../../store/actions/index';\nimport { updateObject, checkValidity } from '../../../shared/utility';\n\nclass ContactData extends Component {\n  state = {\n\t  orderForm: {\n      name: {\n  \t    elementType: 'input',\n        elementConfig: {\n          type: 'text',\n          placeholder: 'Your Name'\n        },\n        value: '',\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false\n      },\n      street : {\n        elementType: 'input',\n        elementConfig: {\n          type: 'text',\n          placeholder: 'Street'\n        },\n        value: '',\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false\n      },\n      zipCode : {\n    \t  elementType: 'input',\n    \t  elementConfig: {\n    \t    type: 'text',\n    \t    placeholder: 'ZIP Code'\n    \t  },\n    \t  value: '',\n        validation: {\n          required: true,\n          minLength: 5,\n          maxLength: 5\n        },\n        valid: false,\n        touched: false\n      },\n      country : {\n        elementType: 'input',\n        elementConfig: {\n          type: 'text',\n          placeholder: 'Country'\n        },\n        value: '',\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false\n      },\n      email : {\n        elementType: 'input',\n        elementConfig: {\n          type: 'email',\n          placeholder: 'Your e-mail'\n        },\n        value: '',\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false\n      },\n      deliveryMethod: {\n  \t    elementType: 'select',\n  \t    elementConfig: {\n  \t      options: [\n  \t        { value: 'fastest', displayValue: 'Fastest' },\n  \t        { value: 'cheapest', displayValue: 'Cheapest' }\n  \t      ]\n  \t    },\n        value: 'fastest',\n        validation: {},\n        valid: true\n      },\n    },\n    formIsValid: false\n\t};\n\n  orderHandler = (event) => {\n    event.preventDefault();\n\n    const formData = {};\n    for (let formElementId in this.state.orderForm) {\n      formData[formElementId] = this.state.orderForm[formElementId].value;\n    }\n\n    const order = {\n    ingredients : this.props.ings,\n    price : this.props.price,\n    orderData : formData,\n    userId: this.props.userId\n    };\n\n    this.props.onOrderBurger(order, this.props.token);\n  }\n\n  inputChangedHandler = (event, inputIdentifier) => {\n\n\t\tconst updatedFormElement = updateObject(this.state.orderForm[inputIdentifier], {\n      value: event.target.value,\n      valid: checkValidity(event.target.value, this.state.orderForm[inputIdentifier].validation),\n      touched: true\n    });\n\n    const updatedOrderForm = updateObject(this.state.orderForm, {\n      [inputIdentifier]:updatedFormElement\n    });\n    \n    let formIsValid = true;\n    for(let inputId in updatedOrderForm) {\n      formIsValid = updatedOrderForm[inputId].valid && formIsValid;\n    }\n\n\t\tthis.setState({orderForm: updatedOrderForm, formIsValid: formIsValid});\n  }\n\n  render() {\n  \tconst formElementsArray = [];\n    for(let key in this.state.orderForm) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.orderForm[key]\n      })\n    }\n\n    let form = (\n      <form onSubmit={this.orderHandler}>\n        {\n          formElementsArray.map(formElement => (\n            <Input\n              key={formElement.id}\n              elementType={formElement.config.elementType}\n              elementConfig={formElement.config.elementConfig}\n              value={formElement.config.value}\n              invalid={!formElement.config.valid}\n              shouldValidate={formElement.config.validation}\n              touched={formElement.config.touched}\n              changed={(event) => this.inputChangedHandler(event, formElement.id)}\n              />))\n        }\n        <Button btnType=\"Success\" disabled={!this.state.formIsValid}>ORDER</Button>\n      </form>\n      );\n\n    if(this.props.loading) {\n      form = <Spinner />;\n    }\n    return (\n      <div className={classes.ContactData}>\n        <h4>Enter your Contact Data</h4>\n        {form}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    ings: state.burgerBuilder.ingredients,\n    price: state.burgerBuilder.totalPrice,\n    loading: state.order.loading,\n    token: state.auth.token,\n    userId: state.auth.userId\n  }\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onOrderBurger: (orderData, token) => dispatch(actions.purchaseBurger(orderData, token))\n  }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));","import React, { Component } from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport CheckoutSummary from '../../components/Order/CheckoutSummary/CheckoutSummary';\nimport ContactData from './ContactData/ContactData';\n\nclass Checkout extends Component {\n\n    checkoutCancelledHandler = () => {\n        this.props.history.goBack();\n    }\n\n    checkoutContinuedHandler = () => {\n        this.props.history.replace('checkout/contact-data');\n    }\n\n    render() {\n        let summary = <Redirect to=\"/\" />;\n        const purchasedRedirect = this.props.purchased ? <Redirect to=\"/\" /> : null;\n\n        if(this.props.ings) {\n            summary = (\n                <div>\n                    {purchasedRedirect}\n                    <CheckoutSummary\n                        ingredients={this.props.ings}\n                        checkoutCancelled={this.checkoutCancelledHandler}\n                        checkoutContinued={this.checkoutContinuedHandler} />\n                    <Route\n                        path={this.props.match.path + '/contact-data'}\n                        component={ContactData} />\n                </div>\n            );\n        }\n        return summary;\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        ings: state.burgerBuilder.ingredients,\n        purchased: state.order.purchased\n    }\n}\n\nexport default connect(mapStateToProps)(Checkout);","import React from 'react';\n\nimport classes from './Input.module.css';\n\nconst input = props => {\n  let inputElement = null;\n  const inputClasses = [classes.InputElement];\n\n  if(props.invalid && props.shouldValidate && props.touched) {\n    inputClasses.push(classes.Invalid);\n  }\n\n\tswitch (props.elementType) {\n\t\tcase ('input'):\n\t\t\tinputElement = <input className={inputClasses.join(' ')}\n        {...props.elementConfig}\n        value={props.value}\n        onChange={props.changed}/>;\n      break;\n    case ('textarea'):\n      inputElement = <textarea className={inputClasses.join(' ')}\n        {...props.elementConfig}\n        value={props.value}\n        onChange={props.changed} />;\n      break;\n    case ('select'):\n      inputElement = (\n        <select\n          className={inputClasses.join(' ')}\n          value={props.value}\n          onChange={props.changed}>\n          {\n            props.elementConfig.options.map(option => (\n              <option key={option.value} value={option.value}>\n                {option.displayValue}\n              </option>\n            ))\n          }\n        </select>);\n      break;\n    default:\n      inputElement = <input className={inputClasses.join(' ')}\n        {...props.elementConfig}\n        value={props.value}\n        onChange={props.changed} />;\n  }\n\n\treturn (\n\t\t<div className={classes.Input}>\n\t\t\t<label className={classes.Label}>{props.label}</label>\n\t\t\t{inputElement}\n\t\t</div>\n);\n}\n\nexport { input as Input };\nexport default input;"],"sourceRoot":""}