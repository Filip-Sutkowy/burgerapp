{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.css","containters/Auth/Auth.module.css","containters/Auth/Auth.js"],"names":["input","props","inputElement","inputClasses","classes","InputElement","invalid","shouldValidate","touched","push","Invalid","elementType","className","join","elementConfig","value","onChange","changed","options","map","option","key","displayValue","Input","Label","label","module","exports","Auth","state","controls","email","type","placeholder","validation","required","isEmail","valid","password","minLength","isSignup","inputChangedHandler","event","controlName","updatedControls","updateObject","target","checkValidity","setState","submitHandler","preventDefault","onAuth","switchAuthModeHandler","prevState","this","buildingBurger","authRedirectPath","onSetAuthRedirectPath","formElementsArray","id","config","form","formElement","loading","Spinner","errorMessge","error","style","color","message","authRedirect","isAuth","to","onSubmit","Button","btnType","clicked","Component","connect","auth","token","burgerBuilder","building","dispatch","actions"],"mappings":"oHAAA,sEAIMA,EAAQ,SAAAC,GACZ,IAAIC,EAAe,KACbC,EAAe,CAACC,IAAQC,cAM/B,OAJIJ,EAAMK,SAAWL,EAAMM,gBAAkBN,EAAMO,SAChDL,EAAaM,KAAKL,IAAQM,SAGrBT,EAAMU,aACb,IAAM,QACLT,EAAe,yCAAOU,UAAWT,EAAaU,KAAK,MAC1CZ,EAAMa,cADA,CAEVC,MAAOd,EAAMc,MACbC,SAAUf,EAAMgB,WAClB,MACF,IAAM,WACJf,EAAe,4CAAUU,UAAWT,EAAaU,KAAK,MAChDZ,EAAMa,cADG,CAEbC,MAAOd,EAAMc,MACbC,SAAUf,EAAMgB,WAClB,MACF,IAAM,SACJf,EACE,4BACEU,UAAWT,EAAaU,KAAK,KAC7BE,MAAOd,EAAMc,MACbC,SAAUf,EAAMgB,SAEdhB,EAAMa,cAAcI,QAAQC,IAAI,SAAAC,GAAM,OACpC,4BAAQC,IAAKD,EAAOL,MAAOA,MAAOK,EAAOL,OACtCK,EAAOE,iBAKlB,MACF,QACEpB,EAAe,yCAAOU,UAAWT,EAAaU,KAAK,MAC7CZ,EAAMa,cADG,CAEbC,MAAOd,EAAMc,MACbC,SAAUf,EAAMgB,WAGvB,OACC,yBAAKL,UAAWR,IAAQmB,OACvB,2BAAOX,UAAWR,IAAQoB,OAAQvB,EAAMwB,OACvCvB,IAMWF,O,oBCvDf0B,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,MAAQ,qBAAqB,aAAe,4BAA4B,QAAU,yB,oBCAjID,EAAOC,QAAU,CAAC,KAAO,qB,mMCYnBC,E,2MACLC,MAAQ,CACPC,SAAU,CACNC,MAAO,CACNpB,YAAa,QACZG,cAAe,CACbkB,KAAM,QACNC,YAAa,iBAEflB,MAAO,GACPmB,WAAY,CACfC,UAAU,EACVC,SAAS,GAENC,OAAO,EACP7B,SAAS,GAEX8B,SAAU,CACT3B,YAAa,QACZG,cAAe,CACbkB,KAAM,WACNC,YAAa,YAEflB,MAAO,GACPmB,WAAY,CACfC,UAAU,EACVI,UAAW,GAERF,OAAO,EACP7B,SAAS,IAGfgC,UAAU,G,EAWVC,oBAAsB,SAACC,EAAOC,GAC9B,IAAMC,EAAkBC,YAAa,EAAKhB,MAAMC,SAAZ,eAClCa,EAAcE,YAAa,EAAKhB,MAAMC,SAASa,GAAc,CAC7D5B,MAAO2B,EAAMI,OAAO/B,MACpBsB,MAAOU,YAAcL,EAAMI,OAAO/B,MAAO,EAAKc,MAAMC,SAASa,GAAaT,YAC1E1B,SAAS,MAIX,EAAKwC,SAAS,CAAClB,SAAUc,K,EAG1BK,cAAgB,SAACP,GAChBA,EAAMQ,iBAEN,EAAKjD,MAAMkD,OAAO,EAAKtB,MAAMC,SAASC,MAAMhB,MAAO,EAAKc,MAAMC,SAASQ,SAASvB,MAAO,EAAKc,MAAMW,W,EAGnGY,sBAAwB,WACvB,EAAKJ,SAAS,SAAAK,GACb,MAAM,CAACb,UAAWa,EAAUb,a,mFA3BxBc,KAAKrD,MAAMsD,gBAAkD,MAAhCD,KAAKrD,MAAMuD,kBAC5CF,KAAKrD,MAAMwD,0B,+BA8BH,IAAD,OACDC,EAAoB,GACzB,IAAI,IAAIrC,KAAOiC,KAAKzB,MAAMC,SACxB4B,EAAkBjD,KAAK,CACrBkD,GAAItC,EACJuC,OAAQN,KAAKzB,MAAMC,SAAST,KAIlC,IAAIwC,EAAOH,EAAkBvC,IAAI,SAAA2C,GAAW,OAC3C,kBAACvC,EAAA,EAAD,CACCF,IAAKyC,EAAYH,GACjBhD,YAAamD,EAAYF,OAAOjD,YAChCG,cAAegD,EAAYF,OAAO9C,cAClCC,MAAO+C,EAAYF,OAAO7C,MAC1BT,SAAUwD,EAAYF,OAAOvB,MAC7B9B,eAAgBuD,EAAYF,OAAO1B,WACnC1B,QAASsD,EAAYF,OAAOpD,QAC5BS,QAAS,SAACyB,GAAD,OAAW,EAAKD,oBAAoBC,EAAOoB,EAAYH,SAI9DL,KAAKrD,MAAM8D,UACdF,EAAO,kBAACG,EAAA,EAAD,OAGR,IAAIC,EAAc,KAEfX,KAAKrD,MAAMiE,QACbD,EAAe,uBAAGE,MAAO,CAACC,MAAO,QAASd,KAAKrD,MAAMiE,MAAMG,UAG5D,IAAIC,EAAe,KAMnB,OAJGhB,KAAKrD,MAAMsE,SACbD,EAAe,kBAAC,IAAD,CAAUE,GAAIlB,KAAKrD,MAAMuD,oBAIxC,yBAAK5C,UAAWR,IAAQwB,MACtB0C,EACD,4BAAKhB,KAAKzB,MAAMW,SAAW,aAAe,cACzCyB,EACD,0BAAMQ,SAAUnB,KAAKL,eACnBY,EACD,kBAACa,EAAA,EAAD,CAAQC,QAAQ,WAAhB,WAED,kBAACD,EAAA,EAAD,CACCE,QAAStB,KAAKF,sBACduB,QAAQ,UAFT,aAE6BrB,KAAKzB,MAAMW,SAAW,SAAW,e,GApH/CqC,aA2IJC,sBAjBS,SAAAjD,GACvB,MAAO,CACNkC,QAASlC,EAAMkD,KAAKhB,QACpBG,MAAOrC,EAAMkD,KAAKb,MAClBK,OAA6B,OAArB1C,EAAMkD,KAAKC,MACnBzB,eAAgB1B,EAAMoD,cAAcC,SACpC1B,iBAAkB3B,EAAMkD,KAAKvB,mBAIJ,SAAA2B,GAC1B,MAAO,CACNhC,OAAQ,SAACpB,EAAOO,EAAUE,GAAlB,OAA+B2C,EAASC,IAAarD,EAAOO,EAAUE,KAC9EiB,sBAAuB,kBAAM0B,EAASC,IAA4B,SAIrDN,CAA6ClD","file":"static/js/4.1d173051.chunk.js","sourcesContent":["import React from 'react';\n\nimport classes from './Input.module.css';\n\nconst input = props => {\n  let inputElement = null;\n  const inputClasses = [classes.InputElement];\n\n  if(props.invalid && props.shouldValidate && props.touched) {\n    inputClasses.push(classes.Invalid);\n  }\n\n\tswitch (props.elementType) {\n\t\tcase ('input'):\n\t\t\tinputElement = <input className={inputClasses.join(' ')}\n        {...props.elementConfig}\n        value={props.value}\n        onChange={props.changed}/>;\n      break;\n    case ('textarea'):\n      inputElement = <textarea className={inputClasses.join(' ')}\n        {...props.elementConfig}\n        value={props.value}\n        onChange={props.changed} />;\n      break;\n    case ('select'):\n      inputElement = (\n        <select\n          className={inputClasses.join(' ')}\n          value={props.value}\n          onChange={props.changed}>\n          {\n            props.elementConfig.options.map(option => (\n              <option key={option.value} value={option.value}>\n                {option.displayValue}\n              </option>\n            ))\n          }\n        </select>);\n      break;\n    default:\n      inputElement = <input className={inputClasses.join(' ')}\n        {...props.elementConfig}\n        value={props.value}\n        onChange={props.changed} />;\n  }\n\n\treturn (\n\t\t<div className={classes.Input}>\n\t\t\t<label className={classes.Label}>{props.label}</label>\n\t\t\t{inputElement}\n\t\t</div>\n);\n}\n\nexport { input as Input };\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3r5Ke\",\"Label\":\"Input_Label__1qyHr\",\"InputElement\":\"Input_InputElement__2m88K\",\"Invalid\":\"Input_Invalid__16Mis\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__12r8M\"};","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\n\nimport {\n\tButton,\n\tInput,\n\tSpinner\n } from '../../components/UI/index';\nimport classes from './Auth.module.css';\nimport * as actions from '../../store/actions/index';\nimport { updateObject, checkValidity } from '../../shared/utility';\n\nclass Auth extends Component {\n\tstate = {\n\t\tcontrols: {\n      email: {\n  \t    elementType: 'input',\n        elementConfig: {\n          type: 'email',\n          placeholder: 'E-mail Adress'\n        },\n        value: '',\n        validation: {\n\t\t\t\t\trequired: true,\n\t\t\t\t\tisEmail: true\n        },\n        valid: false,\n        touched: false\n      },\n      password: {\n  \t    elementType: 'input',\n        elementConfig: {\n          type: 'password',\n          placeholder: 'Password'\n        },\n        value: '',\n        validation: {\n\t\t\t\t\trequired: true,\n\t\t\t\t\tminLength: 6\n        },\n        valid: false,\n        touched: false\n      }\n\t\t},\n\t\tisSignup: true\n\t}\n\n\tcomponentDidMount() {\n\t\tif (!this.props.buildingBurger && this.props.authRedirectPath !== '/') {\n\t\t\tthis.props.onSetAuthRedirectPath();\n\t\t}\n\t}\n\n\n\n  inputChangedHandler = (event, controlName) => {\n\t\tconst updatedControls = updateObject(this.state.controls, {\n\t\t\t[controlName]: updateObject(this.state.controls[controlName], {\n\t\t\t\tvalue: event.target.value,\n\t\t\t\tvalid: checkValidity(event.target.value, this.state.controls[controlName].validation),\n\t\t\t\ttouched: true\n\t\t\t})\n\t\t});\n\n\t\tthis.setState({controls: updatedControls});\n  }\n\t\n\tsubmitHandler = (event) => {\n\t\tevent.preventDefault();\n\n\t\tthis.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignup);\n\t}\n\n\tswitchAuthModeHandler = () => {\n\t\tthis.setState(prevState => {\n\t\t\treturn{isSignup: !prevState.isSignup};\n\t\t})\n\t}\n\n\trender() {\n  \tconst formElementsArray = [];\n    for(let key in this.state.controls) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.controls[key]\n      })\n\t\t}\n\t\t\n\t\tlet form = formElementsArray.map(formElement => (\n\t\t\t<Input\n\t\t\t\tkey={formElement.id}\n\t\t\t\telementType={formElement.config.elementType}\n\t\t\t\telementConfig={formElement.config.elementConfig}\n\t\t\t\tvalue={formElement.config.value}\n\t\t\t\tinvalid={!formElement.config.valid}\n\t\t\t\tshouldValidate={formElement.config.validation}\n\t\t\t\ttouched={formElement.config.touched}\n\t\t\t\tchanged={(event) => this.inputChangedHandler(event, formElement.id)}\n\t\t\t\t/>\n\t\t));\n\n\t\tif (this.props.loading) {\n\t\t\tform = <Spinner />;\n\t\t}\n\n\t\tlet errorMessge = null;\n\n\t\tif(this.props.error) {\n\t\t\terrorMessge = (<p style={{color: 'red'}}>{this.props.error.message}</p>);\n\t\t}\n\n\t\tlet authRedirect = null;\n\n\t\tif(this.props.isAuth) {\n\t\t\tauthRedirect = <Redirect to={this.props.authRedirectPath} />;\n\t\t}\n\n\t\treturn (\n\t\t\t<div className={classes.Auth}>\n\t\t\t\t{authRedirect}\n\t\t\t\t<h1>{this.state.isSignup ? \"Signing up\" : \"Signing in\"}</h1>\n\t\t\t\t{errorMessge}\n\t\t\t\t<form onSubmit={this.submitHandler}>\n\t\t\t\t\t{form}\n\t\t\t\t\t<Button btnType=\"Success\">SUBMIT</Button>\n\t\t\t\t</form>\n\t\t\t\t<Button\n\t\t\t\t\tclicked={this.switchAuthModeHandler}\n\t\t\t\t\tbtnType=\"Danger\">SWITCH TO {this.state.isSignup ? \"SIGNIN\" : \"SIGNUP\"}</Button>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nconst mapStateToProps = state => {\n\treturn {\n\t\tloading: state.auth.loading,\n\t\terror: state.auth.error,\n\t\tisAuth: state.auth.token !== null,\n\t\tbuildingBurger: state.burgerBuilder.building,\n\t\tauthRedirectPath: state.auth.authRedirectPath\n\t};\n};\n\nconst mapDispatchToProps = dispatch => {\n\treturn {\n\t\tonAuth: (email, password, isSignup) => dispatch(actions.auth(email, password, isSignup)),\n\t\tonSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\n\t};\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);"],"sourceRoot":""}