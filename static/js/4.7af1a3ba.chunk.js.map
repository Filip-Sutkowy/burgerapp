{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.css","containters/Auth/Auth.module.css","containters/Auth/Auth.js"],"names":["input","props","inputElement","inputClasses","classes","InputElement","invalid","shouldValidate","touched","push","Invalid","elementType","className","join","elementConfig","value","onChange","changed","options","map","option","key","displayValue","Input","Label","label","module","exports","connect","state","loading","auth","error","isAuth","token","buildingBurger","burgerBuilder","building","authRedirectPath","dispatch","onAuth","email","password","isSignup","actions","onSetAuthRedirectPath","useState","type","placeholder","validation","required","isEmail","valid","minLength","controls","setControls","setIsSignup","useEffect","formElementsArray","id","config","form","formElement","event","controlName","updatedControls","updateObject","target","checkValidity","inputChangedHandler","Spinner","errorMessge","style","color","message","authRedirect","to","Auth","onSubmit","preventDefault","Button","btnType","clicked"],"mappings":"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","file":"static/js/4.7af1a3ba.chunk.js","sourcesContent":["import React from 'react';\n\nimport classes from './Input.module.css';\n\nconst input = props => {\n  let inputElement = null;\n  const inputClasses = [classes.InputElement];\n\n  if(props.invalid && props.shouldValidate && props.touched) {\n    inputClasses.push(classes.Invalid);\n  }\n\n\tswitch (props.elementType) {\n\t\tcase ('input'):\n\t\t\tinputElement = <input className={inputClasses.join(' ')}\n        {...props.elementConfig}\n        value={props.value}\n        onChange={props.changed}/>;\n      break;\n    case ('textarea'):\n      inputElement = <textarea className={inputClasses.join(' ')}\n        {...props.elementConfig}\n        value={props.value}\n        onChange={props.changed} />;\n      break;\n    case ('select'):\n      inputElement = (\n        <select\n          className={inputClasses.join(' ')}\n          value={props.value}\n          onChange={props.changed}>\n          {\n            props.elementConfig.options.map(option => (\n              <option key={option.value} value={option.value}>\n                {option.displayValue}\n              </option>\n            ))\n          }\n        </select>);\n      break;\n    default:\n      inputElement = <input className={inputClasses.join(' ')}\n        {...props.elementConfig}\n        value={props.value}\n        onChange={props.changed} />;\n  }\n\n\treturn (\n\t\t<div className={classes.Input}>\n\t\t\t<label className={classes.Label}>{props.label}</label>\n\t\t\t{inputElement}\n\t\t</div>\n);\n}\n\nexport { input as Input };\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3r5Ke\",\"Label\":\"Input_Label__1qyHr\",\"InputElement\":\"Input_InputElement__2m88K\",\"Invalid\":\"Input_Invalid__16Mis\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__12r8M\"};","import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\n\nimport {\n\tButton,\n\tInput,\n\tSpinner\n} from '../../components/UI/index';\nimport classes from './Auth.module.css';\nimport * as actions from '../../store/actions/index';\nimport { updateObject, checkValidity } from '../../shared/utility';\n\nconst Auth = props => {\n\tconst [controls, setControls] = useState({\n\t\temail: {\n\t\t\telementType: 'input',\n\t\t\telementConfig: {\n\t\t\t\ttype: 'email',\n\t\t\t\tplaceholder: 'E-mail Adress'\n\t\t\t},\n\t\t\tvalue: '',\n\t\t\tvalidation: {\n\t\t\t\trequired: true,\n\t\t\t\tisEmail: true\n\t\t\t},\n\t\t\tvalid: false,\n\t\t\ttouched: false\n\t\t},\n\t\tpassword: {\n\t\t\telementType: 'input',\n\t\t\telementConfig: {\n\t\t\t\ttype: 'password',\n\t\t\t\tplaceholder: 'Password'\n\t\t\t},\n\t\t\tvalue: '',\n\t\t\tvalidation: {\n\t\t\t\trequired: true,\n\t\t\t\tminLength: 6\n\t\t\t},\n\t\t\tvalid: false,\n\t\t\ttouched: false\n\t\t}\n\t});\n\n\tconst [isSignup, setIsSignup] = useState(true);\n\n\tconst { buildingBurger, authRedirectPath, onSetAuthRedirectPath } = props;\n\n\tuseEffect(() => {\n\t\tif (!buildingBurger && authRedirectPath !== '/') {\n\t\t\tonSetAuthRedirectPath();\n\t\t}\n\t}, [buildingBurger, authRedirectPath, onSetAuthRedirectPath]);\n\n\tconst inputChangedHandler = (event, controlName) => {\n\t\tconst updatedControls = updateObject(controls, {\n\t\t\t[controlName]: updateObject(controls[controlName], {\n\t\t\t\tvalue: event.target.value,\n\t\t\t\tvalid: checkValidity(event.target.value, controls[controlName].validation),\n\t\t\t\ttouched: true\n\t\t\t})\n\t\t});\n\t\tsetControls(updatedControls);\n\t}\n\n\tconst submitHandler = (event) => {\n\t\tevent.preventDefault();\n\n\t\tprops.onAuth(controls.email.value, controls.password.value, isSignup);\n\t}\n\n\tconst switchAuthModeHandler = () => {\n\t\tsetIsSignup(!isSignup);\n\t}\n\n\tconst formElementsArray = [];\n\tfor (let key in controls) {\n\t\tformElementsArray.push({\n\t\t\tid: key,\n\t\t\tconfig: controls[key]\n\t\t})\n\t}\n\n\tlet form = formElementsArray.map(formElement => (\n\t\t<Input\n\t\t\tkey={formElement.id}\n\t\t\telementType={formElement.config.elementType}\n\t\t\telementConfig={formElement.config.elementConfig}\n\t\t\tvalue={formElement.config.value}\n\t\t\tinvalid={!formElement.config.valid}\n\t\t\tshouldValidate={formElement.config.validation}\n\t\t\ttouched={formElement.config.touched}\n\t\t\tchanged={(event) => inputChangedHandler(event, formElement.id)}\n\t\t/>\n\t));\n\n\tif (props.loading) {\n\t\tform = <Spinner />;\n\t}\n\n\tlet errorMessge = null;\n\n\tif (props.error) {\n\t\terrorMessge = (<p style={{ color: 'red' }}>{props.error.message}</p>);\n\t}\n\n\tlet authRedirect = null;\n\n\tif (props.isAuth) {\n\t\tauthRedirect = <Redirect to={props.authRedirectPath} />;\n\t}\n\n\treturn (\n\t\t<div className={classes.Auth}>\n\t\t\t{authRedirect}\n\t\t\t<h1>{isSignup ? \"Signing up\" : \"Signing in\"}</h1>\n\t\t\t{errorMessge}\n\t\t\t<form onSubmit={submitHandler}>\n\t\t\t\t{form}\n\t\t\t\t<Button btnType=\"Success\">SUBMIT</Button>\n\t\t\t</form>\n\t\t\t<Button\n\t\t\t\tclicked={switchAuthModeHandler}\n\t\t\t\tbtnType=\"Danger\">SWITCH TO {isSignup ? \"SIGNIN\" : \"SIGNUP\"}</Button>\n\t\t</div>\n\t);\n}\n\nconst mapStateToProps = state => {\n\treturn {\n\t\tloading: state.auth.loading,\n\t\terror: state.auth.error,\n\t\tisAuth: state.auth.token !== null,\n\t\tbuildingBurger: state.burgerBuilder.building,\n\t\tauthRedirectPath: state.auth.authRedirectPath\n\t};\n};\n\nconst mapDispatchToProps = dispatch => {\n\treturn {\n\t\tonAuth: (email, password, isSignup) => dispatch(actions.auth(email, password, isSignup)),\n\t\tonSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\n\t};\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);"],"sourceRoot":""}