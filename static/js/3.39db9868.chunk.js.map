{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.css","components/Order/CheckoutSummary/CheckoutSummary.module.css","containters/Checkout/ContactData/ContactData.module.css","components/Order/CheckoutSummary/CheckoutSummary.js","containters/Checkout/ContactData/ContactData.js","containters/Checkout/Checkout.js"],"names":["input","props","inputElement","inputClasses","classes","InputElement","invalid","shouldValidate","touched","push","Invalid","elementType","className","join","elementConfig","value","onChange","changed","options","map","option","key","displayValue","Input","Label","label","module","exports","checkoutSummary","CheckoutSummary","style","width","height","margin","ingredients","Burger","Button","btnType","clicked","checkoutCancelled","checkoutContinued","connect","state","ings","burgerBuilder","price","totalPrice","loading","order","token","auth","userId","dispatch","onOrderBurger","orderData","actions","withErrorHandler","useState","name","type","placeholder","validation","required","valid","street","zipCode","minLength","maxLength","country","email","deliveryMethod","orderForm","setOrderForm","formIsValid","setFormIsValid","formElementsArray","id","config","form","onSubmit","event","preventDefault","formData","formElementId","formElement","inputIdentifier","updatedFormElement","updateObject","target","checkValidity","updatedOrderForm","inputId","inputChangedHandler","disabled","Spinner","ContactData","axios","purchased","summary","to","purchasedRedirect","history","goBack","replace","path","match","component"],"mappings":"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","file":"static/js/3.39db9868.chunk.js","sourcesContent":["import React from 'react';\n\nimport classes from './Input.module.css';\n\nconst input = props => {\n  let inputElement = null;\n  const inputClasses = [classes.InputElement];\n\n  if(props.invalid && props.shouldValidate && props.touched) {\n    inputClasses.push(classes.Invalid);\n  }\n\n\tswitch (props.elementType) {\n\t\tcase ('input'):\n\t\t\tinputElement = <input className={inputClasses.join(' ')}\n        {...props.elementConfig}\n        value={props.value}\n        onChange={props.changed}/>;\n      break;\n    case ('textarea'):\n      inputElement = <textarea className={inputClasses.join(' ')}\n        {...props.elementConfig}\n        value={props.value}\n        onChange={props.changed} />;\n      break;\n    case ('select'):\n      inputElement = (\n        <select\n          className={inputClasses.join(' ')}\n          value={props.value}\n          onChange={props.changed}>\n          {\n            props.elementConfig.options.map(option => (\n              <option key={option.value} value={option.value}>\n                {option.displayValue}\n              </option>\n            ))\n          }\n        </select>);\n      break;\n    default:\n      inputElement = <input className={inputClasses.join(' ')}\n        {...props.elementConfig}\n        value={props.value}\n        onChange={props.changed} />;\n  }\n\n\treturn (\n\t\t<div className={classes.Input}>\n\t\t\t<label className={classes.Label}>{props.label}</label>\n\t\t\t{inputElement}\n\t\t</div>\n);\n}\n\nexport { input as Input };\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3r5Ke\",\"Label\":\"Input_Label__1qyHr\",\"InputElement\":\"Input_InputElement__2m88K\",\"Invalid\":\"Input_Invalid__16Mis\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__3PsXi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__31ME6\"};","import React from 'react';\n\nimport Burger from '../../Burger/Burger';\nimport Button from '../../UI/Button/Button';\nimport classes from './CheckoutSummary.module.css';\n\nconst checkoutSummary = (props) => {\n    return (\n        <div className={classes.CheckoutSummary}>\n            <h1>We hope it tastes well!</h1>\n            <div style={{width: '100%', height: '300px', margin: 'auto'}}>\n                { props.ingredients ? <Burger ingredients={props.ingredients} /> : null }\n            </div>\n            <Button\n                btnType=\"Danger\"\n                clicked={props.checkoutCancelled}>CANCEL</Button>\n            <Button\n                btnType=\"Success\"\n                clicked={props.checkoutContinued}>CONTINUE</Button>\n        </div>\n    );\n}\n\nexport default checkoutSummary;","import React, { useState } from 'react';\nimport { connect } from 'react-redux';\n\nimport axios from '../../../axios-orders';\nimport Button from '../../../components/UI/Button/Button';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport classes from './ContactData.module.css';\nimport Input from '../../../components/UI/Input/Input';\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\nimport * as actions from '../../../store/actions/index';\nimport { updateObject, checkValidity } from '../../../shared/utility';\n\nconst ContactData = (props) => {\n  const [orderForm, setOrderForm] = useState({\n    name: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'text',\n        placeholder: 'Your Name'\n      },\n      value: '',\n      validation: {\n        required: true\n      },\n      valid: false,\n      touched: false\n    },\n    street: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'text',\n        placeholder: 'Street'\n      },\n      value: '',\n      validation: {\n        required: true\n      },\n      valid: false,\n      touched: false\n    },\n    zipCode: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'text',\n        placeholder: 'ZIP Code'\n      },\n      value: '',\n      validation: {\n        required: true,\n        minLength: 5,\n        maxLength: 5\n      },\n      valid: false,\n      touched: false\n    },\n    country: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'text',\n        placeholder: 'Country'\n      },\n      value: '',\n      validation: {\n        required: true\n      },\n      valid: false,\n      touched: false\n    },\n    email: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'email',\n        placeholder: 'Your e-mail'\n      },\n      value: '',\n      validation: {\n        required: true\n      },\n      valid: false,\n      touched: false\n    },\n    deliveryMethod: {\n      elementType: 'select',\n      elementConfig: {\n        options: [\n          { value: 'fastest', displayValue: 'Fastest' },\n          { value: 'cheapest', displayValue: 'Cheapest' }\n        ]\n      },\n      value: 'fastest',\n      validation: {},\n      valid: true\n    },\n  });\n\n  const [formIsValid, setFormIsValid] = useState(false);\n\n\n  const orderHandler = (event) => {\n    event.preventDefault();\n\n    const formData = {};\n    for (let formElementId in orderForm) {\n      formData[formElementId] = orderForm[formElementId].value;\n    }\n\n    const order = {\n      ingredients: props.ings,\n      price: props.price,\n      orderData: formData,\n      userId: props.userId\n    };\n\n    props.onOrderBurger(order, props.token);\n  }\n\n  const inputChangedHandler = (event, inputIdentifier) => {\n\n    const updatedFormElement = updateObject(orderForm[inputIdentifier], {\n      value: event.target.value,\n      valid: checkValidity(event.target.value, orderForm[inputIdentifier].validation),\n      touched: true\n    });\n\n    const updatedOrderForm = updateObject(orderForm, {\n      [inputIdentifier]: updatedFormElement\n    });\n\n    let formIsValid = true;\n    for (let inputId in updatedOrderForm) {\n      formIsValid = updatedOrderForm[inputId].valid && formIsValid;\n    }\n    setOrderForm(updatedOrderForm);\n    setFormIsValid(formIsValid);\n  }\n\n  const formElementsArray = [];\n  for (let key in orderForm) {\n    formElementsArray.push({\n      id: key,\n      config: orderForm[key]\n    })\n  }\n\n  let form = (\n    <form onSubmit={orderHandler}>\n      {\n        formElementsArray.map(formElement => (\n          <Input\n            key={formElement.id}\n            elementType={formElement.config.elementType}\n            elementConfig={formElement.config.elementConfig}\n            value={formElement.config.value}\n            invalid={!formElement.config.valid}\n            shouldValidate={formElement.config.validation}\n            touched={formElement.config.touched}\n            changed={(event) => inputChangedHandler(event, formElement.id)}\n          />))\n      }\n      <Button btnType=\"Success\" disabled={!formIsValid}>ORDER</Button>\n    </form>\n  );\n\n  if (props.loading) {\n    form = <Spinner />;\n  }\n  return (\n    <div className={classes.ContactData}>\n      <h4>Enter your Contact Data</h4>\n      {form}\n    </div>\n  );\n}\n\nconst mapStateToProps = state => {\n  return {\n    ings: state.burgerBuilder.ingredients,\n    price: state.burgerBuilder.totalPrice,\n    loading: state.order.loading,\n    token: state.auth.token,\n    userId: state.auth.userId\n  }\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onOrderBurger: (orderData, token) => dispatch(actions.purchaseBurger(orderData, token))\n  }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport CheckoutSummary from '../../components/Order/CheckoutSummary/CheckoutSummary';\nimport ContactData from './ContactData/ContactData';\n\nconst Checkout = props => {\n\n    const checkoutCancelledHandler = () => {\n        props.history.goBack();\n    }\n\n    const checkoutContinuedHandler = () => {\n        props.history.replace('checkout/contact-data');\n    }\n\n\n    let summary = <Redirect to=\"/\" />;\n    const purchasedRedirect = props.purchased ? <Redirect to=\"/\" /> : null;\n\n    if (props.ings) {\n        summary = (\n            <div>\n                {purchasedRedirect}\n                <CheckoutSummary\n                    ingredients={props.ings}\n                    checkoutCancelled={checkoutCancelledHandler}\n                    checkoutContinued={checkoutContinuedHandler} />\n                <Route\n                    path={props.match.path + '/contact-data'}\n                    component={ContactData} />\n            </div>\n        );\n    }\n    return summary;\n}\n\nconst mapStateToProps = state => {\n    return {\n        ings: state.burgerBuilder.ingredients,\n        purchased: state.order.purchased\n    }\n}\n\nexport default connect(mapStateToProps)(Checkout);"],"sourceRoot":""}